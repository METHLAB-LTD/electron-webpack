{"version":3,"file":"dll.js","sourceRoot":"","sources":["../../src/configurators/dll.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;;;;;AAC9C,AAAO,AAAK,AAAI,AAAM,AAAM;;AAC5B,AAAO,AAAE,AAAS,AAAE,AAAkB,AAAE,AAAM,AAAS;;;;;;;;;;AAEvD,AAAO,AAAE,AAAoB,AAAE,AAAU,AAAE,AAAM,AAAS,AAE1D,AAAM;;;;;;;;;;;;;2CAAC,AAAK,WAAuB,AAAiC;AAClE,QAAI,AAAW,cAAkB,AAAI;AACrC,UAAM,AAAU,aAAG,AAAY,aAAC,AAAU;;AAE1C,QAAI,AAAY,aAAC,AAAI,SAAK,AAAc,gBAAE;AACxC,YAAM,AAAG,MAAG,AAAY,aAAC,AAA4B,6BAAC,AAAU,SAAC,AAAG;;AACpE,UAAI,AAAG,OAAI,AAAI,MAAE;AACf,cAAM,IAAI,AAAK,AAAC,MAAyC,AAAC;AAC3D;;AAED,AAAY,mBAAC,AAAM,OAAC,AAAK,cAAS,AAAO,QAAC,AAAG,AAAC,AAAC,AAAC;AAAE,AAAM,gBAAE,AAAG,AAAC,AAAC,AAAC;AAAf,OAArB,AAAK,GAAgC,AAAG;AAEpE,AAAW,oBAAG,AAAI,KAAC,AAAI,KAAC,AAAY,aAAC,AAAmB,qBAAE,AAAY,aAAC,AAAI,MAAE,AAAe,AAAC;AAC7F,AAAY,mBAAC,AAAO,QAAC,AAAI,UAAK,AAAS;AACrC,AAAI,cAAE,AAAQ;AACd,AAAI,cAAE,AAAW;AACjB,AAAO,iBAAE,AAAU,AACpB,AAAC,AAAC;AAJqC,OAAd;AAM1B,YAAM,AAAM,SAAG,AAAY,aAAC,AAAM,OAAC,AAAO,QAC1C,AAAyB;;AACzB,aAAO,AAAM,OAAC,AAAa;AAC3B,AAAM,aAAC,AAAO,UAAG,AAAQ;AAC1B,WACI,IAAI,AAAY,aAAC,AAAI,SAAK,AAAU,YAAE;AACzC,YAAM,AAAM,SAAG,AAAI,KAAC,AAAI,KAAC,AAAY,aAAC,AAAmB,qBAAE,AAAc,AAAC;AAC1E,YAAM,AAAO,UAAG,MAAM,AAAU,wBAAC,AAAM,AAAC;;AACxC,UAAI,AAAO,WAAI,AAAI,QAAI,CAAC,AAAO,QAAC,AAAW,AAAE,eAAE;AAC7C,AAAY,qBAAC,AAAK,MAAC,AAAkB,AAAC;AACtC,eAAO,AAAI;AACZ;;AAED,AAAY,mBAAC,AAAK,AAAC,wBAAkB,AAAM,MAAE,AAAC;AAC9C,AAAY,mBAAC,AAAO,QAAC,AAAI,UAAK,AAAkB;AAC9C,AAAO,iBAAE,AAAU;AACnB,AAAQ,kBAAE,MAAM,AAAQ,0BAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAe,AAAC,AAAC,AAC7D,AAAC,AAAC;AAH8C,OAAvB;AAI3B;;AAED,WAAO,AAAW,AACpB;AAAC,AAED,AAAM;;;;;;;;;;4CAAC,AAAK,WAAuB,AAAc,QAAE,AAAiC;AAClF,QAAI,AAAY,aAAC,AAA4B,6BAAC,AAAU,SAAC,AAAG,OAAI,AAAI,MAAE;AACpE,aAAO,AAAE;AACV;;AAED,UAAM,AAAK,QAAG,MAAM,AAAoB,kCAAC,AAAO,yBAAC,AAAM,AAAC,AAAC;AACzD,WAAO,AAAK,SAAI,AAAI,AAAC,AAAC,OAAC,AAAE,AAAC,AAAC,KAAC,AAAK,MAAC,AAAM,OAAC,AAAE,AAAC,AAAE,MAAC,AAAE,GAAC,AAAQ,SAAC,AAAK,AAAC,UAAI,AAAE,GAAC,AAAQ,SAAC,AAAM,AAAC,AAAC,SAAC,AAAI,AAAE,AAClG;AAAC","sourcesContent":["import { readdir, readJson } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { DllPlugin, DllReferencePlugin } from \"webpack\"\nimport { WebpackConfigurator } from \"../main\"\nimport { orNullIfFileNotExist, statOrNull } from \"../util\"\n\nexport async function configureDll(configurator: WebpackConfigurator): Promise<string | null> {\n  let dllManifest: string | null = null\n  const projectDir = configurator.projectDir\n\n  if (configurator.type === \"renderer-dll\") {\n    const dll = configurator.electronWebpackConfiguration.renderer!!.dll\n    if (dll == null) {\n      throw new Error(`renderer-dll requires DLL configuration`)\n    }\n\n    configurator.config.entry = Array.isArray(dll) ? {vendor: dll} : dll\n\n    dllManifest = path.join(configurator.commonDistDirectory, configurator.type, \"manifest.json\")\n    configurator.plugins.push(new DllPlugin({\n      name: \"[name]\",\n      path: dllManifest,\n      context: projectDir,\n    }))\n\n    const output = configurator.config.output!\n    // leave as default \"var\"\n    delete output.libraryTarget\n    output.library = \"[name]\"\n  }\n  else if (configurator.type === \"renderer\") {\n    const dllDir = path.join(configurator.commonDistDirectory, \"renderer-dll\")\n    const dirStat = await statOrNull(dllDir)\n    if (dirStat == null || !dirStat.isDirectory()) {\n      configurator.debug(\"No DLL directory\")\n      return null\n    }\n\n    configurator.debug(`DLL directory: ${dllDir}`)\n    configurator.plugins.push(new DllReferencePlugin({\n      context: projectDir,\n      manifest: await readJson(path.join(dllDir, \"manifest.json\")),\n    }))\n  }\n\n  return dllManifest\n}\n\nexport async function getDllAssets(dllDir: string, configurator: WebpackConfigurator) {\n  if (configurator.electronWebpackConfiguration.renderer!!.dll == null) {\n    return []\n  }\n\n  const files = await orNullIfFileNotExist(readdir(dllDir))\n  return files == null ? [] : files.filter(it => it.endsWith(\".js\") || it.endsWith(\".css\")).sort()\n}"]}
