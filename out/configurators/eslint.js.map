{"version":3,"file":"eslint.js","sourceRoot":"","sources":["../../src/configurators/eslint.ts"],"names":[],"mappings":";;;;;;;yBAEgC,AAAiC;AAC/D,QAAM,AAAS,YAAG,AAAY,aAAC,AAAgB,iBAAC,AAAyB,AAAC;;AAC1E,MAAI,AAAC,EAAC,AAAS,AAAI,aAAC,AAAY,aAAC,AAAgB,iBAAC,AAAQ,AAAC,aAAI,AAAY,aAAC,AAAgB,iBAAC,AAAe,AAAC,AAAC,AAAC,mBAAE;AAC/G,AAAM;AACP;;AAED,QAAM,AAAO;AACX,AAAG,SAAE,AAAY,aAAC,AAAU,AAC7B;AAFwC;;AAGzC,MAAI,AAAS,aAAI,AAAY,aAAC,AAAgB,iBAAC,AAA2B,AAAC,8BAAE;AAC3E,AAAO,YAAC,AAAS,YAAG,AAAO,QAAC,AAA2B,AAAC;AACzD;;AAED,AAAY,eAAC,AAAK,MAAC,AAAI;AACrB,AAAI,UAAE,AAAoB;AAC1B,AAAO,aAAE,AAAK;AACd,AAAO,aAAE,AAAc;AACvB,AAAM,YAAE,AAAe;AACvB,AAAO,AACR,AAAC,AACJ;AAP0B;AAOzB","sourcesContent":["import { WebpackConfigurator } from \"../main\"\n\nexport function configureEslint(configurator: WebpackConfigurator) {\n  const hasPreset = configurator.hasDevDependency(\"electron-webpack-eslint\")\n  if (!(hasPreset || (configurator.hasDevDependency(\"eslint\") && configurator.hasDevDependency(\"eslint-loader\")))) {\n    return\n  }\n\n  const options: { [name: string]: any } = {\n    cwd: configurator.projectDir\n  }\n  if (hasPreset || configurator.hasDevDependency(\"eslint-friendly-formatter\")) {\n    options.formatter = require(\"eslint-friendly-formatter\")\n  }\n\n  configurator.rules.push({\n    test: /\\.(jsx?|tsx?|vue)$/,\n    enforce: \"pre\",\n    exclude: /node_modules/,\n    loader: \"eslint-loader\",\n    options\n  })\n}"]}
