{"version":3,"file":"dev-runner.js","sourceRoot":"","sources":["../../src/dev/dev-runner.ts"],"names":[],"mappings":";;AAAA,AAAO,AAAe,AAAM,AAAc;;;;;;;;;;AAC1C,AAAO,AAAK,AAAM,AAAO;;;;;;;;;;AACzB,AAAO,AAAE,AAAK,AAAE,AAAM,AAAe;;;;;;;;;;AACrC,AAAO,AAAE,AAAO,AAAE,AAAM,AAAE,AAAM,AAAY;;;;;;;;;;AAC5C,AAAO,AAAK,AAAI,AAAM,AAAM;;AAC5B,AAAO,AAA6B;;AACpC,AAAO,AAAqB,AAAM,AAAS;;;;;;;;;;AAC3C,AAAO,AAAE,AAAS,AAAE,AAAM,AAAgC;;;;;;;;;;AAC1D,AAAO,AAAE,AAAS,AAAE,AAAM,AAAS;;;;;;;;;;AACnC,AAAO,AAAE,AAAW,AAAE,AAAoB,AAAE,AAAM,AAAS;;;;;;;;;;AAC3D,AAAO,AAAE,AAAe,AAAE,AAAY,AAAE,AAAQ,AAAE,AAAU,AAAE,AAAqB,AAAE,AAAM,AAAW;;;;;;;;;;AACtG,AAAO,AAAE,AAAa,AAAE,AAAM,AAA2B;;;;;;;;;;AAQzD,AAAyD;;2CACzD,AAAK;AACH,UAAM,AAAM,SAAG,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAM,QAAE,AAAM,AAAC;AACpD,UAAM,AAAK,QAAG,MAAM,AAAoB,kCAAC,AAAO,yBAAC,AAAM,AAAC,AAAC;;AACzD,QAAI,AAAK,SAAI,AAAI,MAAE;AACjB,AAAM;AACP;;AAED,UAAM,AAAe,uBAAC,AAAG,IAAC,AAAK,MAAC,AAAM,OAAC,AAAE,AAAC,AAAE,MAAC,CAAC,AAAE,GAAC,AAAU,WAAC,AAAG,AAAC,QAAI,AAAE,OAAK,AAAS,AAAC,YAAE,AAAE,AAAC,AAAE,MAAC,AAAM,wBAAC,AAAM,SAAG,AAAI,KAAC,AAAG,MAAG,AAAE,AAAC,AAAC,AAC9H;AAAC;;;;;;;;4CA+GD,AAAK;AACH,UAAM,AAAS,YAAG,IAAI,AAAS,AAAE;AACjC,UAAM,AAAS,UAAC,AAAK,AAAE,AACzB;AAAC;;;;;;;;;;;AAjID,MAAM,AAAU,aAAG,AAAO,QAAC,AAAG,AAAE;AAEhC,IAAI,AAAU,aAAkB,AAAI;;AAEpC,MAAM,AAAK,QAAG,AAAO,QAAC,AAAO,AAAC,SAAC,AAAkB,AAAC;;AAalD;AACQ,AAAK,OAAX,AAAK;;;;AACH,YAAM,AAAO,UAAG,AAAW;AAC3B,YAAM,AAAO,UAAG,MAAM,AAAW,yBAAC,AAAO,SAAE,AAAI,AAAC;AAChD,YAAM,AAAG,wBACJ,AAAY,AAAE;AACjB,AAAyB,mCAAE,AAAO;AAClC,AAAyB,mCAAE,AAAO,AACnC;;AAED,YAAM,AAAS,YAAG,KAAI,AAAS,AAAE;AACjC,YAAM,AAAO,QAAC,AAAG,KACf,AAAa,8CAAC,AAAU,YAAE,AAAG,AAAC,gBACpB,AAAM,AAAE,SACf,AAAI,KAAC,AAAE,AAAC,AAAE;AACT,AAAU,qBAAG,AAAE,AACjB;AAAC,AAAC,OAHJ,AAAS,CAFO,EAMhB,AAAe,AAAE,kBACd,AAAI,KAAC,AAAG,AAAE,MAAC,AAAI,MAAC,AAAoB,qBAAC,AAAS,AAAC,AAAC,AACpD,AAAC;AAEF,AAAS,gBAAC,AAAG,IAAC,AAAE,GAAC,AAAO,SAAG,AAAY,AAAE,AAAE,KAAjB;AACxB,AAAQ,iCAAC,AAAM,QAAE,AAAK,AAAC,AACzB;AAAC,AAAC;AAEF,YAAM,AAAY,eAAG,AAAO,QAAC,AAAG,IAAC,AAAa;AAC9C,YAAM,AAAI,OAAG,AAAY,gBAAI,AAAI,QAAI,AAAY,aAAC,AAAM,SAAG,AAAC,AAAC,AAAC,IAAC,AAAI,KAAC,AAAK,MAAC,AAAY,AAAC,AAAC,AAAC,gBAAC,AAAC,cAAa,MAAM,AAAW,yBAAC,AAAW,aAAE,AAAI,AAAC,KAAE,AAAC;AAC/I,AAAI,WAAC,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAmB,AAAC,AAAC,uBACrD,AAA4G;;AAC5G,AAAI,WAAC,AAAI,KAAC,GAAG,AAAO,QAAC,AAAI,KAAC,AAAK,MAAC,AAAC,AAAC,AAAC,KACnC,AAA4D;;AAC5D,AAAa,oBAAC,AAAI,MAAE,AAAG,AAAC,AAC1B;;AAAC;;AAEK,AAAoB,sBAA1B,AAAK,CAAsB,AAAoB;;AAC7C,YAAM,AAAU,aAAG,6BAAgB,AAAM;AACvC,AAAU,oBAAE,AAAK;AACjB,AAAS,mBAAE,AAAK;AAChB,AAAmB;AACjB,AAAI,gBAAE,AAAG,AAAE,OACT,AAAS,AACX;AAAC;AAED,AAAI,gBAAG,AAAe,AAAE,AAAE,OAApB;AACJ,AAAU,uCAAC,AAAM,QAAE,AAAO,SAAE,AAAK,iBAAC,AAAM,AAAC,AAC3C;AAAC;AAED,AAAK,iBAAG,AAAe,AAAE,AAAE,OAApB;AACL,AAAU,uCAAC,AAAM,QAAE,AAAO,SAAE,AAAK,iBAAC,AAAG,AAAC,AACxC;AAAC,AACF,AACF,AAAC;AAbqB;AAHoB,OAAlB,AAAS;AAkBlC,gBAAU,AAAO,QAAC,CAAC,AAA4B,SAAE,AAAuC,AAAE,AAAE;AAC1F,cAAM,AAAQ,WAAa,AAAO,wBAAC,AAAY,AAAC;AAEhD,cAAM,AAAqB,6BAAO,AAAe,4BAAC,AAAG,AAAE;AACrD,AAAU,qCAAC,AAAM,QAAE,AAAc,gBAAE,AAAK,iBAAC,AAAM,AAAC,AAClD;AAAC,AAAC,SAF4B;AAG9B,AAAQ,iBAAC,AAAK,MAAC,AAAO,QAAC,AAAG,IAAC,AAA6B,+BAAE,AAAG,AAAE;AAC7D,AAAS,oBAAC,AAAa,AAAE;AACzB,AAAqB,gCAAC,AAAQ,AAAE,AAClC;AAAC,AAAC;AAEF,YAAI,AAAO,mBAAsC,AAAK,MAAC,AAAE,IAAE,CAAC,AAAK,OAAE,AAAK,AAAE,AAAE;AAC1E,AAAqB,gCAAC,AAAM,AAAE;;AAE9B,cAAI,AAAO,WAAI,AAAI,MAAE;AACnB,AAAM;AACP;;AAED,cAAI,AAAK,SAAI,AAAI,MAAE;AACjB,gBAAI,AAAM,UAAI,AAAI,MAAE;AAClB,AAAQ,uCAAC,AAAM,QAAE,AAAK,AAAC;AACxB,mBACI;AACH,AAAM,qBAAC,AAAK,AAAC;AACb,AAAM,uBAAG,AAAI;AACd;;AACD,AAAM;AACP;;AAED,AAAU,qCAAC,AAAM,cAAQ,AAAQ;AAC/B,AAAM,oBAAE,AAAI,AACb,AAAC;AAFgC,WAAf,AAAK,GAEpB,AAAK,iBAAC,AAAM,AAAC;;AAEjB,cAAI,AAAO,WAAI,AAAI,MAAE;AACnB,AAAO,AAAE;AACT,AAAO,sBAAG,AAAI;AACd,AAAM;AACP;;AAED,AAAS,oBAAC,AAAK,MAAC,AAAK,AAAC,AACxB;AAAC,AAAC,SA7BsC,AAAQ;;AA+BhD,AAAO,gBAAC,AAAiB,AAAC,mBAAE,AAAoB,AAAE,AAAE,QAAzB;AACzB,AAAK,AAAC,oCAAoB,AAAQ,YAAI,AAAI,IAAE,AAAC;AAC7C,gBAAM,AAAC,IAAG,AAAO;;AACjB,cAAI,AAAC,KAAI,AAAI,MAAE;AACb,AAAM;AACP;;AAED,AAAO,oBAAG,AAAI;AACd,AAAC,YAAC,AAAK,MAAC,AAAG,AAAE,MAAC,AAAQ,AAAE,AAAC,AAC3B;AAAC,AAAC,AACJ;AAAC,AAAC,AACJ,OArDQ;;AAqDP,AACF;;;;AAOD,AAAI,AAAE,OACH,AAAK,MAAC,AAAK,AAAC,AAAE;AACb,AAAO,UAAC,AAAK,MAAC,AAAK,AAAC,AACtB;AAAC,AAAC;;AAEJ,uBAAuB,AAA2B,cAAE,AAAQ;AAC1D,QAAM,AAAe,8CAAS,AAAO,QAAC,AAAU,AAAC,YAAC,AAAQ,AAAE,YAAE,AAAY;AACxE,AAAG,2BACE,AAAG;AACN,AAAwB,gCAAE,AAAU,AACrC,AACF,AAAC;;AAL0E,GAApD,AAAK,GAO7B,AAAsB;;AACtB,AAAO,UAAC,AAAiB,AAAC,mBAAC,AAAG,AAAE;AAC9B,AAAe,oBAAC,AAAI,KAAC,AAAQ,AAAC,AAChC;AAAC,AAAC;;AAEF,MAAI,AAAU,aAAkB,AAAI;AACpC,AAAe,kBAAC,AAAM,OAAC,AAAE,GAAC,AAAM,QAAE,AAAI,AAAC,AAAE;AACvC,AAAI,WAAG,AAAI,KAAC,AAAQ,AAAE,YACtB,AAAkD;;AAClD,QAAI,AAAI,KAAC,AAAI,AAAE,WAAK,AAAwB,0BAAE;AAC5C,AAAU,mBAAG,AAAI;AACjB,AAAM;AACP;;AAED,QAAI,AAAU,cAAI,AAAI,MAAE;AACtB,AAAI,aAAG,AAAU,aAAG,AAAI;AACxB,AAAU,mBAAG,AAAI;AAClB;;AAED,AAAU,+BAAC,AAAU,YAAE,AAAI,MAAE,AAAK,iBAAC,AAAI,AAAC,AAC1C;AAAC,AAAC;AAEF,AAAqB,wCAAC,AAAU,YAAE,AAAe,AAAC;AAElD,AAAe,kBAAC,AAAE,GAAC,AAAO,SAAE,AAAQ,AAAC,AAAE;AACrC,AAAK,AAAC,4CAAkC,AAAQ,QAAE,AAAC;;AACnD,QAAI,AAAQ,aAAK,AAAG,KAAE;AACpB,AAAY,mBAAC,AAAG,AAAE;AAChB,AAAa,sBAAC,AAAY,cAAE,AAAG,AAAC,AAClC;AAAC,AAAC;AACH,WACI;AACF,AAAe,cAAC,AAAI,KAAC,AAAS,WAAE,AAAU,AAAC;AAC7C,AACH;AAAC,AAAC,AACJ;AAAC","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport chalk from \"chalk\"\nimport { spawn } from \"child_process\"\nimport { readdir, remove } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport \"source-map-support/register\"\nimport webpack, { Compiler } from \"webpack\"\nimport { HmrServer } from \"../electron-main-hmr/HmrServer\"\nimport { configure } from \"../main\"\nimport { getFreePort, orNullIfFileNotExist } from \"../util\"\nimport { DelayedFunction, getCommonEnv, logError, logProcess, logProcessErrorOutput } from \"./devUtil\"\nimport { startRenderer } from \"./WebpackDevServerManager\"\n\nconst projectDir = process.cwd()\n\nlet socketPath: string | null = null\n\nconst debug = require(\"debug\")(\"electron-webpack\")\n\n// do not remove main.js to allow IDE to keep breakpoints\nasync function emptyMainOutput() {\n  const outDir = path.join(projectDir, \"dist\", \"main\")\n  const files = await orNullIfFileNotExist(readdir(outDir))\n  if (files == null) {\n    return\n  }\n\n  await BluebirdPromise.map(files.filter(it => !it.startsWith(\".\") && it !== \"main.js\"), it => remove(outDir + path.sep + it))\n}\n\nclass DevRunner {\n  async start() {\n    const wdsHost = \"localhost\"\n    const wdsPort = await getFreePort(wdsHost, 9080)\n    const env = {\n      ...getCommonEnv(),\n      ELECTRON_WEBPACK_WDS_HOST: wdsHost,\n      ELECTRON_WEBPACK_WDS_PORT: wdsPort,\n    }\n\n    const hmrServer = new HmrServer()\n    await Promise.all([\n      startRenderer(projectDir, env),\n      hmrServer.listen()\n        .then(it => {\n          socketPath = it\n        }),\n      emptyMainOutput()\n        .then(() => this.startMainCompilation(hmrServer)),\n    ])\n\n    hmrServer.ipc.on(\"error\", (error: Error) => {\n      logError(\"Main\", error)\n    })\n\n    const electronArgs = process.env.ELECTRON_ARGS\n    const args = electronArgs != null && electronArgs.length > 0 ? JSON.parse(electronArgs) : [`--inspect=${await getFreePort(\"127.0.0.1\", 5858)}`]\n    args.push(path.join(projectDir, \"dist/main/main.js\"))\n    // Pass remaining arguments to the application. Remove 3 instead of 2, to remove the `dev` argument as well.\n    args.push(...process.argv.slice(3))\n    // we should start only when both start and main are started\n    startElectron(args, env)\n  }\n\n  async startMainCompilation(hmrServer: HmrServer) {\n    const mainConfig = await configure(\"main\", {\n      production: false,\n      autoClean: false,\n      forkTsCheckerLogger: {\n        info: () => {\n          // ignore\n        },\n\n        warn: (message: string) => {\n          logProcess(\"Main\", message, chalk.yellow)\n        },\n\n        error: (message: string) => {\n          logProcess(\"Main\", message, chalk.red)\n        },\n      },\n    })\n\n    await new Promise((resolve: (() => void) | null, reject: ((error: Error) => void) | null) => {\n      const compiler: Compiler = webpack(mainConfig!!)\n\n      const printCompilingMessage = new DelayedFunction(() => {\n        logProcess(\"Main\", \"Compiling...\", chalk.yellow)\n      })\n      compiler.hooks.compile.tap(\"electron-webpack-dev-runner\", () => {\n        hmrServer.beforeCompile()\n        printCompilingMessage.schedule()\n      })\n\n      let watcher: Compiler.Watching | null = compiler.watch({}, (error, stats) => {\n        printCompilingMessage.cancel()\n\n        if (watcher == null) {\n          return\n        }\n\n        if (error != null) {\n          if (reject == null) {\n            logError(\"Main\", error)\n          }\n          else {\n            reject(error)\n            reject = null\n          }\n          return\n        }\n\n        logProcess(\"Main\", stats.toString({\n          colors: true,\n        }), chalk.yellow)\n\n        if (resolve != null) {\n          resolve()\n          resolve = null\n          return\n        }\n\n        hmrServer.built(stats)\n      })\n\n      require(\"async-exit-hook\")((callback: () => void) => {\n        debug(`async-exit-hook: ${callback == null}`)\n        const w = watcher\n        if (w == null) {\n          return\n        }\n\n        watcher = null\n        w.close(() => callback())\n      })\n    })\n  }\n}\n\nasync function main() {\n  const devRunner = new DevRunner()\n  await devRunner.start()\n}\n\nmain()\n  .catch(error => {\n    console.error(error)\n  })\n\nfunction startElectron(electronArgs: Array<string>, env: any) {\n  const electronProcess = spawn(require(\"electron\").toString(), electronArgs, {\n    env: {\n      ...env,\n      ELECTRON_HMR_SOCKET_PATH: socketPath,\n    }\n  })\n\n  // required on windows\n  require(\"async-exit-hook\")(() => {\n    electronProcess.kill(\"SIGINT\")\n  })\n\n  let queuedData: string | null = null\n  electronProcess.stdout.on(\"data\", data => {\n    data = data.toString()\n    // do not print the only line - doesn't make sense\n    if (data.trim() === \"[HMR] Updated modules:\") {\n      queuedData = data\n      return\n    }\n\n    if (queuedData != null) {\n      data = queuedData + data\n      queuedData = null\n    }\n\n    logProcess(\"Electron\", data, chalk.blue)\n  })\n\n  logProcessErrorOutput(\"Electron\", electronProcess)\n\n  electronProcess.on(\"close\", exitCode => {\n    debug(`Electron exited with exit code ${exitCode}`)\n    if (exitCode === 100) {\n      setImmediate(() => {\n        startElectron(electronArgs, env)\n      })\n    }\n    else {\n      (process as any).emit(\"message\", \"shutdown\")\n    }\n  })\n}"]}
